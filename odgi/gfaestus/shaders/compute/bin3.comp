/*
  Insert each node position into the bins, filling the
  bin buffer with the bins represented as subarrays

  Calculated over the node indices
*/

#version 450

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 0) readonly buffer Nodes {
  vec2 pos[];
} nodes;

layout (set = 0, binding = 1) buffer NodeBins {
  int bin[];
} node_bins;

layout (set = 0, binding = 2) buffer NodeBinOffsets {
  uint offset[];
} node_bin_offset;

layout (set = 0, binding = 3) buffer BinOffsets {
  uint offset_len[];
} bin_offsets;

layout (set = 0, binding = 4) buffer Bins {
  uint node[];
} bins;

layout (push_constant) uniform BinDefinition {
  vec2 top_left;
  uint rows;
  uint columns;
  uint node_count;
} bin_def;


void main() {

  uint index = gl_GlobalInvocationID.x;

  int bin_id = node_bins.bin[index];

  if (bin_id == -1) {
    return;
  }

  uint bin_offset = bin_offsets.offset_len[bin_id];
  uint inner_offset = node_bin_offset.offset[index];

  bins.node[bin_offset + inner_offset] = index;
}
