/*
  Calculate the bin membership for each node position,
  the size of each bin,
  and the offset into each bin for each node.

  Computed over the nodes
*/

#version 450

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 0) readonly buffer Nodes {
  vec2 pos[];
} nodes;

layout (set = 0, binding = 1) buffer NodeBins {
  int bin[];
} node_bins;

layout (set = 0, binding = 2) buffer NodeBinOffsets {
  uint offset[];
} node_bin_offset;

layout (set = 0, binding = 3) buffer BinOffsets {
  uint offset_len[];
} bin_offsets;

/*
layout (set = 0, binding = 3) buffer Bins {
  uint node[];
} bins;
*/

layout (push_constant) uniform BinDefinition {
  vec2 top_left;
  uint rows;
  uint columns;
  uint node_count;
} bin_def;


int bin_for_pos(vec2 pos) {
  if (pos.x < bin_def.top_left.x || pos.y < bin_def.top_left.y) {
    return -1;
  }

  vec2 local_pos = pos - bin_def.top_left;

  uint column = uint(local_pos.x / float(bin_def.columns));
  uint row = uint(local_pos.y / float(bin_def.rows));

  if (column >= bin_def.columns || row >= bin_def.rows) {
    return -1;
  }

  return int((row * bin_def.columns) + column);
}


void main() {

  uint index = gl_GlobalInvocationID.x;

  if (index < bin_def.node_count)  {
    vec2 node_pos = nodes.pos[index];

    int bin_ix = bin_for_pos(node_pos);

    node_bins.bin[index] = bin_ix;

    if (bin_ix == -1) {
      return;
    }

    uint len_ix = uint(bin_ix * 2) + 1;

    uint offset = atomicAdd(bin_offsets.offset_len[len_ix], 1);

    node_bin_offset.offset[index] = offset;
  }
}
