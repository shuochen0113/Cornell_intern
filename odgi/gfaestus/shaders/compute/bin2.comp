/*
  Calculate the index ranges for each bin in the Bins buffer

  Computed over the bins
*/

#version 450

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 0) readonly buffer Nodes {
  vec2 pos[];
} nodes;

layout (set = 0, binding = 1) buffer NodeBins {
  int bin[];
} node_bins;

layout (set = 0, binding = 2) buffer NodeBinOffsets {
  uint offset[];
} node_bin_offset;

layout (set = 0, binding = 3) buffer BinOffsets {
  uint offset_len[];
} bin_offsets;

/*
layout (set = 0, binding = 3) buffer Bins {
  uint node[];
} bins;
*/


layout (push_constant) uniform BinDefinition {
  vec2 top_left;
  uint rows;
  uint columns;
  uint node_count;
} bin_def;


void main() {
  uint index = gl_GlobalInvocationID.x;

  if (index >= bin_def.rows * bin_def.columns
      || index == 0) {
    return;
  }

  uint len_ix = uint(index * 2) + 1;
  uint offset = 0;

  for (uint x = 0; x < index; x++) {
    uint sub_len_ix = uint(x * 2) + 1;

    offset += bin_offsets.offset_len[sub_len_ix];
  }

  bin_offsets.offset_len[index * 2] = offset;

}
